* tips and tricks
** mutex_lock 이 블락 안에서만 유효하도록 짜놓음
** override 표현은 override하는 함수의 base가 virtual 함수임을 확인한다.
** using ServableName = string;
  using Version = int64;
  using VersionMap =
      std::map<Version, ServableStateAndTime, std::greater<Version>>;
  using ServableMap = std::map<ServableName, VersionMap>;
** cpp 에서 스트럭트와 클래스의 차이는 디폴트가 퍼블릭이냐 프라이빗이냐 뿐임.
** 스트럭트에 컨스트럭터도 있을 수 있음
** mutable variable -> can be changed in const function
** decltype -> 정의된 타입 반환
** map 에서 first 가 인덱스고 second가 데이터
**  static auto* registry = new Registry(); -> static 이어서 한 번만.
** 로그를 적는 각종 팩토리들을 등록하게 되어있음.

** 유니폼 샘플러
// A sampler which samples uniformly at random.
  class UniformSampler {
   public:
    UniformSampler() : rd_(), gen_(rd_()), dist_(0, 1) {}

    // Returns true if the sampler decides to sample it with a probability
    // 'rate'.
    bool Sample(const double rate) { return dist_(gen_) < rate; }

   private:
    std::random_device rd_;
    std::mt19937 gen_;
    std::uniform_real_distribution<double> dist_;
  };

- std::mt19937 -> 메르센 트위스터라고 하는 난수 생성기임
- 시드로 std::random_device 사용
- std::uniform_real_dist -> 주어진 범위 내 유니폼 float 생성

** move를 쓸때는 refer가 아니라 포인터 사용.
** 람다 리턴
람다를 리턴하고 있는데, 아마 리턴 타입 Status는 캐스팅 되는 것 같고..

Status Retry(const string& description, const uint32 max_num_retries,
             const int64 retry_interval_micros,
             const std::function<Status()>& retried_fn,
             const std::function<bool()>& is_cancelled) {
  return [&]() {
    Status status;
    // do something
    return status;
  }();
}
-> stackoverflow에 질문 올려놓음.
** GAURDED_BY
** 스트럭트로 감싸기
// The aspired state stored with every managed servable.
//
// We use a struct here instead of a naked bool because this buys some type
// safety, and cannot be implicitly cast to/from pointers by mistake.
struct Aspired {
  bool is_aspired;
};
**
** enum 대신 namespace 사용
namespace device_types{
extern const char* const kMain;
}
** GetMutableValues
그냥 getValues 는 a를 리턴하고, getMutableValues는 &a를 리턴해서 변경가능.
* word-dict
- oblivious : 의식하지 못하는
- harness : 벨트, 긴밀히 협조하는
- delegate : 위임하다. 대표
- implication : 영향, 함축, 암시, 연루
- impervious : 통하지 않는
- conform : 따르다
- conjunction with : ~ 와 연계되어
* util
** any_ptr
- type-safe void* 같은 것인데, 콜러가 잘못 사용한다면 null로 나타나게.
- ptr을 받아서 (ptr.get<string>!=nullptr) 이런 식으로..
- 지나치게 긴 타입 체크 문은 패턴적으로 좋지 않음.
- 내부 type, const를 제거해서 포인터를 들고오고, get시 원래 타입으로 캐스팅
- ptr_(const_cast<void*>(reinterpret_cast<const void*>(ptr))) {}
- reinterpret 캐스트는 c에서 생각하는 형변환이랑 비슷함.
- typename T로 시작하는 블록 안에서 static int dummy 에 대한 주소를 반환 -> 타입에 대한 아이디로 사용 (쩐당...)
** unique_ptr_with_deps
- unique 포인터를 모두 추적해 넣고, 지울 때 한 번에 지워 줌.
- private에 std::vector<UniqueAnyPtr> deleters_, T* object 들고 있음.
- destruction 시 디펜던시가 있는 것까지 다 지운다.
- setOwned -> unique 로 포인터를 내부 오브젝트에 세팅해버림.
- depency 의 경우엔 get으로 넣어 deleters에 넣어 둠. -> 유니크 포인터로 들고온다.
- 디스럽터에서 deleters_ 안에서 pop_back 한다 (쩐당..) -> 블록 벗어나면 사라진는데 포인터가 유니크 포인터다. ㄸ
** threadpool_executor
- 스레드풀에 클로져를 schedule한다. 자세한 부분은 tensorflow/core/lib/core/thread.h 참조
** inline_executor
- 당연한 수순의 함수 실행을 지원한다. 멀티스레드 특성이 필요하지 않을 때 도움된다고 하는데... 잘모르겠음 ㅠㅠ
- ...???
** hash
- hash1, hash2 -> hash 로 해시 컴바인 실행
** status_util
- 프로토 버퍼 형식으로 에러 변환 함. 에러 자체의 상태가 ok가 아니면 다른 메시지로 변환함.
** observer
- 특정 이벤트가 일어날 때 일반 함수 포인터를 호출 해줌.(??)
- Notifier 에 함수객체(람다) 를 넣어놓음. notify를 실행시키면 지정된 함수가 실행됨.
- 유의미한 부분은 블록을 벗어나 함수 오브젝트가 사라지는 걸 체크해서 함수 실행함.
- 내부적으로 함수 객체 리스트를 들고 있고, nullptr 인지 아닌지 체크함.
- IsOrphaned, Orphan, Notify 들고 있는 함수 객체가 nullptr인지 확인, nullptr로 지정, 확인 후 실행
- 각 함수가 mutex로 보호됨.
** file_probinb_env
*** class FileProbingEnv
- FileExists, GetChilderen, IsDirectory, GetFilesize 를 제공하는 인터페이스
*** class TensorflowFileprobingenv : public FileProbingenv
- tensorflow:Env 에서 제공하는 환경에 맞춤
* core
** loader
- servable: data, algorithm
- loader : stream of specific versioned servable
*** loader
**** estimate resource
- load : fetches any dat that needs to be loaded before using the servable
**** unload
**** servable
- load ~ unload 사이에만 not null
*** ResourceUnsafeLoader : public Loader
- 불안정한 리소스를 사용할 때 상태 체크를 사용할 필요는 없으니까 Status::OK()를 리턴하는 서브 클래스
** loader_harness.h
- 매니저가 로더를 소유하기 전에 대화하는 것.  (어댑터?)
- 전체적인 servable의 상태를 관리
*** state
knew -> kLoading
-> kReady (load is finished)
-> kQuiescing (is going to unavailable for serving)
-> kunloading
-> kDisabled (unload is finiished)
-> kError
- 각 상태 사이 사이 transition을 할 수 있음
*** Options
- retry 할 수, retry 간격, 에러시 콜백함수 설정 가능
*** load
- 보통은 다 상태를 바꿔주기만 하는 함수.
- 얘는 retry(리트라이 제약 조건 안에서 실행 해줌)함수 부른 다음 상태 변화
*** unload
- 언로드 부르기 전에 kQuiesced -> kUnloading
- 언로드 부르고 kUnloading -> kDisabled
** servable_id
- ServableId sturct 는 이름과 버전을 갖는다
- 해시, operator 정의
** servable_data
- ServableId, Status, T data를 갖고 있음
- status 는 컨스트럭터에서 설정되는데,
데이터 없고 status 에러 거나
status ok와 데이터 두가지 버전으로 컨스터럭터
- T는 move_constructible 해야 하며
- DataOrdie 는 return data_
- ConsumeDatatOrDie 는 return std::move(DataOrdie)
** servable_handle
*** UntypedServableHandle
- manager가 타입 없이 사용하려고?
- servable() 함수의 리턴형이 AnyPtr임 (타입만 떼주는거야)
- 프론트에서 잡고 있으면 리로딩시 딜레이 발생할 수 있으므로 최대한 잡지 말아야.
*** ServableHandle
- manager와 프랜드
- 내부의 servable_을 리턴함.
- 클래스 생성시 untyped_handle_->servable().get<T> 로 servable_ set
*** SharedPtrHandle
- UntypedServableHandle
- servable id와 shared_ptr형태의 로더를 갖는다. (초기화시에는 move으로 로더 가져옴)
** servable_state_monitor
- 참고로 Notification 클래스는 atomic bool (메모리 배리어 치고) 관련 연산.
- 관련 상태 바꾼다음에 notified 체크
- notified.Notify() -> notified.WaitForNotification

- servable 스테이트를 관리하는 스테이트, 로드 시간에 대한 맵임.
- 모니터는 ServableState 버스를 subscribe
- 특정 state에 도달하면 노티 함수를 실행
-  버스에서 스테이트 변경에 대한 정보가 날아다님.
** log_collector
- 레지스트리 클래스에는 팩토리를 등록하고 찾게 되어있음.
- create 시 config에 표현된 로그 팩토리를 찾아 로그 생성해줌
-   virtual Status CollectMessage(const google::protobuf::Message& message) = 0;
- 얘는 프로토 버퍼에서 정의됨.
** request_logger
- UniformSmapler를 가지고 있음
- 샘플 레이트에 맞으면 protobuf 에 정의 된대로 기록함
** server_request_logger
- 서버에 오는 리퀘스트의 샘플을 로깅
- 모델 버전과 파일 프리픽스 관련 확인 과정이 추가되어 있음.
** manager
- managerwrapper 와 friend임.
- private으로 virtaul GetUntypedServableHandle, GetAvailableUntypedservablehandles 함수를 들고 있음
- 얘네는 상속받는 private안에서 구현해야함.
- mangager.cc 없고 h파일에 다 정의 되어 있음. ServableRequest 구현은 inline 함수임

*** Class ServableRequest
- ServableRequest 를 생성한다. 내부적으로는 name, version을 들고 있다.
*** ListAvailableServableIds
*** GetAvailableservablehandles
- ServableId, SerableHandle 맵을 리턴
*** GetServableHandle
- 주어진 ServableReqeust에 대한 핸들을 리턴한다.
- GetUntypedServablehandle을 통해서, untypedHandle을 얻고, 이걸 다시 servableHandle 을 통해서 handle을 얻는다.
** managerWrapper
- manager를 상속받아서 사용함.
- 프랜드라 private virtual 함수들을 overwrite한다.
- 하지만 구현은 그냥 const UniquePtrWithDeps<Manager> wrapped_; 안에 있는 함수를 대신 불러주는 것 밖에 안함. (얘 왜 필요함???)
** source?
- servable 처리를 위한 abstraction
- file-system path, rpc, loader 등을 관리
- 데이터가 작음을 가정한다.
- AspiredVersionCallback 을 설정하고 부를 수 있다. - 버전관리용?
** target?
- 타겟이 소스의 리퀘스트를 받게되는데..
-
** source_adapter?
- ServableData<InputData> ->ServableData<OutputData>
- servableData의 형식을 바꿈
-
** basicManager
*** BasicManager
- num_loads_threads : 서버블 로드를 하기 위한 스레드 수
- num_unloads-threads : 서버블 언로드를 하기 위한 스레드 수
- servabel_event_bus : 서버블의 상태변화를 퍼블리시 하는 버스(설정 안하면 퍼블리시 안함)
- ManageServable(ServableData<std::unique_ptr<Loader>> servable): 서버블 실행, 이상 있을 경우 중지.
** source_router
- 소스 파일 시스템에서 맞는 어댑터로 연결함.
** simple_servers_test
SavedModelBundle 을 불러와서 bundle.session->run(inputs, output_names, empty_target_node, &outputs)

** predict_impl

*** PreProcessPredcitionResult
- SignatureDef, input, output 텐서 이름을 확인한다.
- reuqest 에 맞는 signatrue 인지 안에 값 서로 비교함.


*** SavedModelPredict
- GetServableHandle로 model spec에 해당하는 SavedModelBundle bundle 들고 옴.
- bundle에서 singature name으로 signature 꺼냄.
- MakeModelSpec 로 response에 model_spec 채움.
- PreProcessPrediction
- bundle->session->run
- PostProcessPrediction
*** SessionBundlePredict
- SavedModelPredict와 차이는 GetNamedSignature 로 input, output을 얻어옴.
*** Predict
- use_saved_model_ 시 SavedModelPredict 부르고, 아니면 SessionBundlePredict 부름
** multi_inference
*** infer
- MultiInferenceRequest 는 그냥 리퀘스트 여러 개임.
- 돌면서 하나하나 처리하게 되어 있음.
- SavedModelPredict와 거의 같긴한데.. predict에서 PreProcess는 내용이 없었단 말야.
- 여기선 Classification ->


** dyanmic_source_router

* sources/stroage_path
*** static_storage_path_source.proto
- servable_name, version_num, version_path
*** static_storage_path_source
- create : config, result(raw_result로) 를 세팅함
- setAspiredversionscallback : config의 servable 타깃에 콜백 부름.
*** file_system_storage_path_source.proto
- ServableVersionPolicy : latest, all, sepcific 있음.
- servable 이 거의 모델인듯?
- ServableToMonitor : servable_name(콜백에서 찍을 이름), base_path(버전 묶음), servable_version_policy
- repeated ServableTomonitor servables
*** file_system_storage_path_source
- 각 base_path안에 이름이 숫자인 애들 중 가장 큰 숫자 파일 선택
- PollFileSystemAndInvokeCallback
- fs_polling_thread_ 별도의 스레드에서 base_path읽으면서 aspired version의 파일을 계속 업데이트함.
***
* resources
** resource_util
- resource allocation에 관한 오퍼레이션
- 10개 정도의 장치에 대함
- normalize -> quantity가 0인 엔트리는 없다. resources에 인스턴스 1:1 바운드
- bound -> instance 가 주어짐.
- getQuantity -> allocation에 나타난 리소스를 리턴
- 기타 operation...
** resousrce_tracker
- Create : normalize -> bound 체크 -> 트래커에 세팅
- ReserveResources :
- RecomputeUsedResources : servable 의 estimate로 used_resource 업데이트함.

** resources.proto
*** resource
- device : gpu or cpu
- device_instance : 자원을 사용하는 instance
- kind : ram or compute
** resource_values
*** device_types
- kmain(main memory)
- kgpu
*** resource kind
- kNumModelSlots : 서버가 최대 n볓개의 모델을 올릴 수 있는지
- kRambytes : 바이트로 된 램
- kProcessingMilllis : 프로세싱 유닛에서 사용하는 비율?

*** ResourceAllocation
- entry : resource, quantity -> 각 리소스가 얼마나 있는지.
- repeated Entry resource_quantities

* servables
** saved_model_bundle_factory
*** create
- session batch config 를 받아와서 config.batching_parameters대로 batcher를 만든다.
*** CreateSavedModelBundle
-


** bundle_factroy_util

** EstimateResource
*** GetAllDescendants
- 모든 디렉토리 아래의 파일들을 구함
*** CreateBatchScheduler
- last allowed batch size와 max batch size 가 일치하는지 확인한다. (왜?)
- batch thread와 스레드 풀 이름을 설정함
*** EstimateResourceFromPath
- path 아래 파일들의 크기를 보두 더한 후 1.2 배를 추측된 램 소요량이라고 한다.
- ram_resource 는 kMain, kRamBytes, quantity는 ram_requirement로 설정한다.
*** WrapSessionForBatching
- batching_config.pad_variable_length

** serving_session
** session_options (tf)
- Env* env
- string target  (ip, port) 리스트
* model_servers
** class PredictionServiceImpl
- PredictionService의 서비스의 구현임.
*** Predict
- rpc로 predict 를 부름.
-

** model_platform_types.h
- kTensorFlowModelPlatfrom[] = "tensorflow"
** platform_config_util

** grpc_status_util
- ToGRPCstatus : Status 를 grpc::Status 로 변환
** server_core

* apis
** classification.proto
*** class
- label : 이름
- score : 이 클래스에 대한 점수. 이 클래스일 확률.
*** classification
- repeated Classifications classifications
*** ClassficationRequest
- ModelSpec model_spec
- tensorflow.serving.Input input
*** ClassifcationResponse
- ModelSpec model_spec
- ClassficationResult result
** classifier.h
*** ClassifierInterface
- Classify : 분류 인터페이스 (?)
** get_model_metadata.proto
*** SignagtureDefMap
- map<string, SignatureDef> signagure_def
- (tensorflow/core/protobuf/meta_graph.proto 에 signagture 있는 듯)
*** GetModelmetadataRequest
- model_spec
- repeated string metadata_field
*** GetModelMetadataResponse
- model_spec
- map<string, google.protobuf.Any> metadat
** get_model_status.proto
*** GetModelStatusRequest
- ModelSpec model_spec
*** ModelVersionStatus
- version
- state
- StatusProto status
*** enum State
- unknown : default value
- start : manager 가 servable을 트래킹만 하고 있는 상태
- loading : 매니저가 리소스 상황 등을 모두 통과해 로드를 부르기려 함.
- available : 로딩이 끝나고, GetServablehandle이 가능해진 상태.
- unloading : 언로딩 부르기 직전
- end : 매니저의 손을 떠남.
*** GetModelStatusResponse
- repeated ModelVersionStatus model_version_status: 요청된 정보들을 넘김
** inference.proto
*** Inference Task
- ModelSpec
- method_name : serving/classify 에 저장된 이름.??
(third_party/tensorflow/python/saved_model/signature_constants)
***  InferenceResult
*** MultiInferenceRequest
- repeated InferenceTask tasks
- Input input
*** MultiInferenceResponse
- repeated InferenceResult restuls
** regression.proto
*** Regression
- float value  : regression result for a single item
*** RegressionResult
- repeated Regression regressions
*** RegressionRequest
- ModelSpec model_spec
- tensorflow.serving.Input input
*** RegressionResponse
- ModelSpec model_spec
- RegressionResult result
** regressor.h
*** RegressorInterface
- Regress
** predict.proto
*** PredictRequest
- ModelSpec : version번호. 명시 안돼있으면 가장 최신 버전 사용
- inputs : input tensor 들의 alias임.
- output_filter : 여기에 명시된 것만 리턴된다는데
- output tensor -> signature def
*** PredictResponse
- model_spec
- outputs : output tensors
** model.proto
*** ModelSpec
- name, version, signature_name
- signature 가 뭐냐?
** prediction_service.proto
- Classify rpc
- Regress rpc
- Predict rpc
- MultiInference rpc
- GetModelMetadata rpc
** input.proto
*** ExampleList
- repeated tensorflw.Example examples
*** ExampleWithContext
*** Input
** model_management.proto
*** ReloadConfigRequest
- ModelServerConfig
*** ReloadConfigResponse
- StatusProto
** model_service.proto
*** ModelService
- rpc GetModelStatus
- rcp HandleReloadConfigRequest
* config
** model_server_config.proto
*** enumModelType
- unspecified, tf, other
*** ModelConfig
- name
- base_path : 버전들이 들어있는 모델 폴더
- string model_platform : tensorflow 같은?
- FileSystemStoragePathSourceConfig.servableversionPolicy model_version_policy;
- LoggingConfig logging_config
*** ModelConfigList
- repeatedModelConfig config
*** ModelServerConfig
- oneof.. -> custom 지원을 위한 래퍼임.
- ModelConfigList model_config_list
- google.protobuf.Any custom_model_config
** log_collector_config.proto
*** LogCollectorConfig
- type : urget? 레벨 말하는건가?
- filename_prefix : 로그파일의 프리픽스
** logging_config.proto
*** SamplingConfig
- sampling_rate
*** LoggingConfig
- LogCollectorConfig
- SamplingConfig
** platform_config.proto
*** PlatformConfig
- google.protobuf.Any source_adapter_config
*** PlatformConfigMap
- map<stirng, PlatformConfig> platform_configs
* example
** inception_clinet.cc
*** ServingClient
**** CallPredict
- 결국에 파일 패스에 있는걸 읽어서 인풋에 넣음...
- 생성시 stub_(PredictionService::NewStub(channel))
- param 은 model_name, model_signature_name, file_path(input images)
- Predictrequest의 mutable_inputs 로 file_path의 이미지를 읽어드림. (텐서)
- predictRequest에 위 파라미터 설정 후 stub에 predict 호출. reponse 받음.
- response 받아서 OutMap& map_outputs = *response.mutable_outputs() 로 데이터 읽음
- tensorflow::TensorProto& result_tensor_proto = inter->second
- bool converted = tensor.FromProto(result_tensor_proto);


*** main
- tf 에서 flag라는 argc 파싱 클래스가 있음.
- 여기에다가 파싱 결과 저장
- 파싱 대상은: 서버 ip, port, image 파일 패스, 모델 이름, model_signature_name
- 해당 server_port로 rpc 채널 생성.
- 모델 이름, model_signature_name, image_file로 CallPredict
* tf/cc/saved_model/loader
** struct SavedModelBundle
- session, meta_graph_default
** ReadSavedModel
- ReadBinaryProto, ReadTextProto를 시도해 읽는다.
** GetTagsAsString
- 태그를 이어 붙인다.
** LoadMetaGraphIntoSession
- sessionOption으로 세션 생성
- 세션의 create 호출
** LoadSavedModel
-
** MaybeSavedModelDirectory
- export_dir에 SavedModel이 있는지 확인한다.
* tf/cc/saved_model/constants.h
**
