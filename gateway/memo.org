* fast read dynamic ptr
 fast read dynamic ptr 못씀.
 EM 구조에서 같은 스레드에서 update, read 같이 불릴 수 있음.
* lock thread annotation
 참고로 thread_annotation은 컴파일 체크용이고
 mu_current_는 shared로 걸리는데,
 내부에서 락을 잡으므로 priviously required는 아니고(shared_locks_required)
 다른 데서도 미리 락을 잡을 수 있으므로 locks_excluded도 필요 없음.
* lock
 nsync 라는 구글 락 라이브러리가 있음.
 tensorflow/core/platform/default/mutex.h 참고하면
 tensorflow에서 mutex_lock-> w 모드,
 tf_shared_lock -> r 모드 락으로 래퍼함.

* Sptr parameter
오너십 수정시에만 shared ptr 형태를 쓸 것
그리고 reference 형태로 전달하면 내부 오너십이 제대로 동작안함!
벡터에 추가 혹은 생성자에 넣어 놓기 등을 위해서는 shared_ptr의 레퍼런스로 넘기면 안됨!
https://msdn.microsoft.com/ko-kr/library/hh279669.aspx

아.. weak ptr 이랑 좀 헷갈리네..
 락이 있으니까, 읽다가 invalid되는 상황은 없음.. 굳이 weak ptr 안써도 되겠지?


* monitoring, hanldes 업데이트하기
로드/언로드시 뉴핸들스에 반영
모니터링 -> 기존 핸들스 정보로 밸리드한 애들만 뉴핸들스로 카피.(shared라서 옮기기 가능?)
